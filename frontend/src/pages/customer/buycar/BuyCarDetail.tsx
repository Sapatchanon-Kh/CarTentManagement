import React, { useState, useEffect } from "react";
import { useParams, useNavigate, useLocation } from "react-router-dom";
import { Row, Col, Card, Typography, Image, Button, Divider, Space, Modal, message } from "antd";
import { ShoppingCartOutlined, PushpinOutlined } from "@ant-design/icons";

import { getCarByID  } from "../../../services/carService";
import { createSalesContract } from "../../../services/salesContractService";
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
import { createBooking } from "../../../services/bookingServices.ts";
import { getSaleListByCarAndPrice } from "../../../services/saleService"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import service ‡πÉ‡∏´‡∏°‡πà
import type { CarInfo } from "../../../interface/Car";
import { useAuth } from "../../../hooks/useAuth";
import { buyCar } from "../../../services/salesContractService";

const { Title, Paragraph } = Typography;

const BuyCarDetailPage: React.FC = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const { user, token } = useAuth();

  const [car, setCar] = useState<CarInfo | null>(null);
  const [loading, setLoading] = useState(true);
  const [buy, setBuy] = useState(false);
  const [book, setBook] = useState(false);

  const isAnyModalOpen = buy || book;

  useEffect(() => {
    window.scrollTo({ top: 0 });
  }, []);

useEffect(() => {
  const fetchCar = async () => {
    try {
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° parseInt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á id ‡πÄ‡∏õ‡πá‡∏ô number
      if (id) {
        const data = await getCarByID(parseInt(id, 10)); 
        setCar(data);
      }
    } catch (error) {
      console.error("Fetch car error:", error);
      message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÑ‡∏î‡πâ");
    } finally {
      setLoading(false);
    }
  };
  fetchCar();
}, [id]);

  useEffect(() => {
    if (user && location.state?.openModal === "buy") {
      setBuy(true);
      navigate(location.pathname, { replace: true });
    }
  }, [user, location, navigate]);

  useEffect(() => {
    if (isAnyModalOpen) document.body.style.overflow = "hidden";
    else document.body.style.overflow = "";
    return () => { document.body.style.overflow = ""; };
  }, [isAnyModalOpen]);

  const handleBuyClick = () => {
    if (!user) {
      navigate("/login", { state: { from: location.pathname, openModal: "buy" } });
    } else {
      setBuy(true);
    }
  };

  const handleConfirmBuy = async () => {
  if (!user?.ID || !token || !car || !id) {
    message.error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏î‡πâ");
    return;
  }
   try {
        // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service buyCar ‡πÉ‡∏´‡∏°‡πà
        // ‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà carID ‡πÅ‡∏•‡∏∞ customerID ‡πÑ‡∏õ‡∏Å‡πá‡∏û‡∏≠
        await buyCar(parseInt(id, 10), user.ID, token);

        setBuy(false);
        setBook(false);
        message.success("‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...");
        navigate("/payment");

    } catch (error) {
        console.error("Failed to buy car:", error);
        message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏ñ");
    }

  try {
    const price = parseFloat(car.sale_list?.[0]?.sale_price.toString() || '0');
    const saleListData = await getSaleListByCarAndPrice(parseInt(id, 10), price);

    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    if (!saleListData?.ID || !saleListData?.employeeID) { 
      message.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sale List ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }

    const contractData = {
      SaleListID: saleListData.ID,
      // ‚úÖ ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      EmployeeID: saleListData.employeeID, 
      CustomerID: user.ID,
    };
    

    await createSalesContract(contractData, token);
    setBuy(false);
    setBook(false);
    message.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...");
    navigate("/payment");
  } catch (error) {
    console.error("Failed to create sales contract:", error);
    message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢");
  }
};

// üóëÔ∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleConfirmLike ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
  const handleLikeClick = () => {
    if (!user) {
      navigate("/login", { state: { from: location.pathname, openModal: "book" } });
    } else {
      setBook(true);
    }
  };

  const handleConfirmLike = async () => {
    // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ sale_list
    if (!user?.ID || !token || !car?.sale_list?.[0]?.ID) {
      message.error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ");
      return;
    }
    try {
      // ‚úÖ 2. ‡∏î‡∏∂‡∏á ID ‡∏à‡∏≤‡∏Å sale_list[0] ‡∏ã‡∏∂‡πà‡∏á‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ SaleListID
      const saleListId = car.sale_list[0].ID;

      // ‚úÖ 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service createBooking ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á saleListId ‡πÅ‡∏•‡∏∞ user.ID
      await createBooking(saleListId, user.ID, token);
      
      setBook(false);
      message.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      navigate("/buycar");
    } catch (error: any) {
      console.error("Failed to create booking:", error);
      // ‚úÖ 4. ‡πÅ‡∏™‡∏î‡∏á error message ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å service
      const errorMessage = error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å";
      message.error(errorMessage);
    }
  };

//   const handleConfirmLike = async () => {
//   if (!user?.ID || !token || !car?.sale_list?.[0]?.ID) {
//     message.error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ");
//     return;
//   }
//   try {
//     const saleListId = car.sale_list[0].ID;

//     await createBooking(saleListId, user.ID, token);

//     setBook(false);
//     message.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
//     navigate("/buycar");

//   } catch (error: any) {
//     console.error("Failed to create booking:", error);

//     // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å backend ‡∏ß‡πà‡∏≤ duplicate ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
//     if (error.response?.status === 409 || error.response?.data?.error?.includes("already")) {
//       // 409 Conflict = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
//       message.warning("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
//       setBook(false);
//       navigate("/buycar");
//     } else {
//       const errorMessage = error.response?.data?.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å";
//       message.error(errorMessage);
//     }
//   }
// };

  if (loading) return <div>Loading...</div>;
  if (!car) return <div>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</div>;


  const baseUrl = "http://localhost:8080/images/cars/";
  const mainCar = car.pictures?.[0] ? `${baseUrl}${car.pictures[0].path}` : "";
  const thumbnails = car.pictures?.slice(1) || [];

  return (
    <div className={`page-container ${isAnyModalOpen ? "blurred" : ""}`}
      style={{ backgroundColor: "#000", minHeight: "100vh", padding: "20px", transition: "filter 0.3s ease" }}>
      <Row gutter={16}>
        <Col xs={24} md={16}>
          <Card
            bordered={false}
            style={{
              backgroundColor: "#1a1a1a",
              borderRadius: 12,
              border: "2px solid gold",
              transition: "box-shadow 0.3s ease-in-out"
            }}
            onMouseEnter={(e) => (e.currentTarget.style.boxShadow = "0 4px 12px rgba(255, 215, 0, 0.4)")}
            onMouseLeave={(e) => (e.currentTarget.style.boxShadow = "none")}
          >
            <Image src={mainCar} alt="car-main" style={{ borderRadius: "12px", marginBottom: "10px" }} />
            <Row gutter={8}>
              {thumbnails.map((thumb, i) => (
                <Col span={6} key={i}>
                  <Image src={`${baseUrl}${thumb.path}`} alt={`car-${i}`} style={{ borderRadius: "8px" }} />
                </Col>
              ))}
            </Row>
          </Card>
        </Col>

        <Col xs={24} md={8}>
          <Card
            bordered={false}
            style={{ backgroundColor: "#1a1a1a", color: "white", borderRadius: 12, border: "2px solid gold", transition: "box-shadow 0.3s ease-in-out" }}
            onMouseEnter={(e) => (e.currentTarget.style.boxShadow = "0 4px 12px rgba(255, 215, 0, 0.4)")}
            onMouseLeave={(e) => (e.currentTarget.style.boxShadow = "none")}
          >
            <Title level={3} style={{ color: "gold" }}>
              {car.brand?.brandName} {car.model?.modelName} ‡∏õ‡∏µ {car.yearManufacture}
            </Title>
            <Title level={2} style={{ color: "white", marginTop: "-10px" }}>
              ‡∏ø {car.sale_list?.[0]?.sale_price.toLocaleString()}
            </Title>

            <Divider style={{ borderColor: "rgba(255, 215, 0, 0.3)" }} />

            <div style={{ color: "#fff", lineHeight: "1.8em" }}>
              <p>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ : {car.brand?.brandName}</p>
              <p>‡∏£‡∏∏‡πà‡∏ô : {car.model?.modelName}</p>
              <p>‡∏õ‡∏µ : {car.yearManufacture}</p>
              <p>‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡∏•‡πå : {car.mileage?.toLocaleString()} ‡∏Å‡∏°.</p>
              <p>‡∏™‡∏µ : {car.color}</p>
            </div>

            <Divider style={{ borderColor: "rgba(255, 215, 0, 0.3)" }} />

            <div style={{ color: "#fff", lineHeight: "1.8em" }}>
              <Title level={4} style={{ color: "gold", marginTop: "-10px" }}>‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</Title>
              <p>‡∏ä‡∏∑‡πà‡∏≠ : {car.employee?.name}</p>
              <p>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : {car.employee?.phone}</p>
            </div>

            <Divider style={{ borderColor: "rgba(255, 215, 0, 0.3)" }} />

            <Space direction="vertical" style={{ width: "100%" }}>
              <Button
                icon={<PushpinOutlined />}
                block
                style={{
                  backgroundColor: "gold",
                  color: "black", fontWeight: "bold",
                  border: "2px solid gold",
                  borderRadius: "10px",
                  boxShadow: "0 2px 8px rgba(255, 215, 0, 0.4)"
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = "black";
                  e.currentTarget.style.color = "gold";
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = "gold";
                  e.currentTarget.style.color = "black";
                }}
                onClick={handleLikeClick}
              >
                ‡∏ñ‡∏π‡∏Å‡πÉ‡∏à
              </Button>

              <Modal
                title={<span style={{ color: '#f1d430ff' }}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡πÉ‡∏à</span>}
                open={book}
                onCancel={() => setBook(false)}
                getContainer={() => document.body}
                maskClosable={false}
                width={600}
                centered
                styles={{
                  body: {
                    backgroundColor: '#000000'
                  },
                  header: {
                    backgroundColor: '#000000',
                    borderBottom: '1px solid #000000'
                  },
                  footer: {
                    backgroundColor: '#000000',
                    borderTop: '1px solid #000000'
                  },
                  content: {
                    backgroundColor: '#000000',
                    border: '2px solid #f1d430ff',
                    borderRadius: '8px'
                  }
                }}
                footer={[
                  <Button
                    key="back"
                    onClick={() => setBook(false)}
                    style={{
                      backgroundColor: "gold",
                      color: "black",
                      fontWeight: "bold",
                      border: "2px solid gold",
                      borderRadius: "10px",
                      boxShadow: "0 2px 8px rgba(255, 215, 0, 0.4)",
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.backgroundColor = "black";
                      e.currentTarget.style.color = "gold";
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.backgroundColor = "gold";
                      e.currentTarget.style.color = "black";
                    }}
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </Button>,
                  <Button
                    key="submit"
                    onClick={handleConfirmLike}
                    style={{
                      backgroundColor: "gold",
                      color: "black",
                      fontWeight: "bold",
                      border: "2px solid gold",
                      borderRadius: "10px",
                      boxShadow: "0 2px 8px rgba(255, 215, 0, 0.4)",
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.backgroundColor = "black";
                      e.currentTarget.style.color = "gold";
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.backgroundColor = "gold";
                      e.currentTarget.style.color = "black";
                    }}
                  >
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                  </Button>,
                ]}
              >
                <div style={{ color: 'white' }}>
                  <p> ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ </p>
                  <p>" ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô "</p>
                </div>
              </Modal>

              <Button
                icon={<ShoppingCartOutlined />}
                block
                style={{
                  backgroundColor: "gold",
                  color: "black",
                  fontWeight: "bold",
                  border: "2px solid gold",
                  borderRadius: "10px",
                  boxShadow: "0 2px 8px rgba(255, 215, 0, 0.4)",
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = "black";
                  e.currentTarget.style.color = "gold";
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = "gold";
                  e.currentTarget.style.color = "black";
                }}
                onClick={handleBuyClick}
              >
                ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
              </Button>

              <Modal
                title={<span style={{ color: '#f1d430ff' }}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</span>}
                open={buy}
                onCancel={() => setBuy(false)}
                getContainer={() => document.body}
                maskClosable={false}
                width={600}
                centered
                styles={{
                  body: {
                    backgroundColor: '#000000'
                  },
                  header: {
                    backgroundColor: '#000000',
                    borderBottom: '1px solid #000000'
                  },
                  footer: {
                    backgroundColor: '#000000',
                    borderTop: '1px solid #000000'
                  },
                  content: {
                    backgroundColor: '#000000',
                    border: '2px solid #f1d430ff',
                    borderRadius: '8px'
                  }
                }}
                footer={[
                  <Button
                    key="back"
                    onClick={() => setBuy(false)}
                    style={{
                      backgroundColor: "gold",
                      color: "black",
                      fontWeight: "bold",
                      border: "2px solid gold",
                      borderRadius: "10px",
                      boxShadow: "0 2px 8px rgba(255, 215, 0, 0.4)",
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.backgroundColor = "black";
                      e.currentTarget.style.color = "gold";
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.backgroundColor = "gold";
                      e.currentTarget.style.color = "black";
                    }}
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </Button>,
                  <Button
                    key="submit"
                    onClick={handleConfirmBuy}
                    style={{
                      backgroundColor: "gold",
                      color: "black",
                      fontWeight: "bold",
                      border: "2px solid gold",
                      borderRadius: "10px",
                      boxShadow: "0 2px 8px rgba(255, 215, 0, 0.4)",
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.backgroundColor = "black";
                      e.currentTarget.style.color = "gold";
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.backgroundColor = "gold";
                      e.currentTarget.style.color = "black";
                    }}
                  >
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                  </Button>,
                ]}
              >
                <div style={{ color: 'white' }}>
                  <p>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• : {user?.first_name} {user?.last_name}</p>
                  <p>‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå : {car.brand?.brandName} {car.model?.modelName} ‡∏õ‡∏µ {car.yearManufacture}</p>
                  <p>‡∏£‡∏≤‡∏Ñ‡∏≤ : {car.sale_list?.[0]?.sale_price.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
                </div>
              </Modal>
            </Space>
          </Card>
        </Col>
      </Row>

      <Card style={{ marginTop: "20px", backgroundColor: "#1a1a1a", color: "white", borderRadius: 12, border: "2px solid gold" }}>
        <Title level={4} style={{ color: "gold" }}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</Title>
        <Paragraph style={{ color: "#ccc" }}>
          {car.carName} ‡∏õ‡∏µ {car.yearManufacture}<br />
          {car.sale_list?.length ? car.sale_list[0].description : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"}
        </Paragraph>
      </Card>
    </div>
  );
};

export default BuyCarDetailPage;